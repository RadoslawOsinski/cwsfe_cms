buildscript {
    repositories {
        mavenLocal();
        mavenCentral();
    }
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'jacoco'
apply plugin: 'org.junit.platform.gradle.plugin'

version = project.ext.project_version
group = "eu.com.cwsfe.cms"
compileJava.options.encoding = 'UTF-8'

dependencies {
    compile project(':cwsfe_cms_repository')
    compile group: 'org.springframework', name: 'spring-webmvc', version: project.ext.spring_version
    compile group: 'org.springframework', name: 'spring-tx', version: project.ext.spring_version
    compile group: 'org.springframework', name: 'spring-core', version: project.ext.spring_version
    compile group: 'org.springframework', name: 'spring-beans', version: project.ext.spring_version
    compile group: 'org.springframework', name: 'spring-context', version: project.ext.spring_version
    compile group: 'org.springframework', name: 'spring-context-support', version: project.ext.spring_version
    compile group: 'org.springframework', name: 'spring-web', version: project.ext.spring_version  //dla CommonsMultipartFile
    compile group: 'javax.ejb', name: 'ejb-api', version: project.ext.javax_ejb_version
    compile group: 'javax.annotation', name: 'javax.annotation-api', version: project.ext.javax_annotation_api_version
    compile group: 'org.modelmapper', name: 'modelmapper', version: project.ext.modelmapper_version
    testCompile group: 'javax.servlet', name: 'javax.servlet-api', version: project.ext.servlet_api_version //3.1.0 -newer version has problems with tests
    testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: project.ext.junit5_platform_version
    testCompile group: 'org.springframework', name: 'spring-test', version: project.ext.spring_version
    testCompile group: 'com.jayway.jsonpath', name: 'json-path', version: project.ext.json_path_version
    testCompile group: 'com.jayway.jsonpath', name: 'json-path-assert', version: project.ext.json_path_version
    testCompile group: 'org.mockito', name: 'mockito-core', version: project.ext.mockito_version
}

def gitCommitHash = "git rev-parse HEAD".execute().text.trim();

jar.archiveName = "CWSFE_CMS_SERVICES-" + version + ".jar";
jar {
    manifest {
        attributes(
            'Specification-Title': project.name,
            'Specification-Version': version,
            'build-number': System.getenv().BUILD_NUMBER == null ? 'local build' : System.getenv().BUILD_NUMBER,
            'build-id': System.getenv().BUILD_ID == null ? 'local build' : System.getenv().BUILD_ID,
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Build-Url': System.getenv().BUILD_URL == null ? 'local build' : System.getenv().BUILD_URL,
            'scm-version': gitCommitHash == null ? 'local build' : gitCommitHash,
            'Build-Tag': System.getenv().BUILD_TAG == null ? 'local build' : System.getenv().BUILD_TAG,
            'Jenkins-Url': System.getenv().JENKINS_URL == null ? 'local build' : System.getenv().JENKINS_URL,
            'Build-Workspace': System.getenv().WORKSPACE == null ? 'local build' : System.getenv().WORKSPACE,
            'Git-Url': System.getenv().GIT_URL == null ? 'local build' : System.getenv().GIT_URL,
            'Git-Branch': System.getenv().GIT_BRANCH == null ? 'local build' : System.getenv().GIT_BRANCH
        )
    }
}

jacoco {
    toolVersion = project.ext.jacoco_version
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
    executionData = files('build/jacoco/test.exec', 'build/jacoco/integration_tests_local.exec')
}

sonarqube {
    properties {
        property "sonar.projectKey", 'cwsfe_cms_services'
        property "sonar.projectName", 'CWSFE cms services'
        property "sonar.sources", 'src/main'
        property "sonar.tests", 'src/test'
        property "sonar.sourceEncoding", 'UTF-8'
    }
}

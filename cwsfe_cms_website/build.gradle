buildscript {
    repositories {
        mavenLocal();
        mavenCentral();
    }
}

apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'jacoco'

version = '3.0.1'
group = "eu.com.cwsfe.cms"
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenLocal();
    mavenCentral();
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-Xlint', '-Xlint:-serial', '-Xlint:-path']
}

configurations {
    tomcatLibs
}

dependencies {
    compile project(':cwsfe_cms_rest')
    providedCompile group: 'javax.servlet.jsp', name: 'jsp-api', version: '2.2.1-b03'
    providedCompile group: 'javax.servlet', name: 'servlet-api', version: '2.5'
    providedCompile group: 'javax.mail', name: 'mail', version: '1.5.0-b01' //provided for wildfly
    providedCompile group: 'javax.activation', name: 'activation', version: '1.1.1' //provided for wildfly
    tomcatLibs group: 'javax.mail', name: 'mail', version: '1.5.0-b01' //only for tomcat
    tomcatLibs group: 'javax.activation', name: 'activation', version: '1.1.1' //only for tomcat
    providedCompile group: 'javax.mail', name: 'javax.mail-api', version: '1.5.0'
    compile group: 'org.springframework.security', name: 'spring-security-web', version: '4.1.3.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-core', version: '4.1.3.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-config', version: '4.1.3.RELEASE'
    compile group: 'org.springframework', name: 'spring-webmvc', version: '4.3.3.RELEASE'
    compile group: 'org.springframework', name: 'spring-tx', version: '4.3.3.RELEASE'
    compile group: 'org.springframework', name: 'spring-core', version: '4.3.3.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version: '4.3.3.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version: '4.3.3.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version: '4.3.3.RELEASE'
    compile group: 'org.springframework', name: 'spring-aop', version: '4.3.3.RELEASE'
    compile group: 'org.springframework', name: 'spring-jms', version: '4.3.3.RELEASE'
    compile group: 'javax.ejb', name: 'ejb-api', version: '3.0'
    compile group: 'javax.servlet.jsp.jstl', name: 'jstl-api', version: '1.2'
    compile group: 'javax.servlet', name: 'jstl', version: '1.2'
    compile group: 'javax.transaction', name: 'javax.transaction-api', version: '1.2'
    compile group: 'javax.resource', name: 'javax.resource-api', version: '1.7'
    compile group: 'javax.persistence', name: 'persistence-api', version: '1.0.2'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.2'
    compile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'
    compile group: 'aopalliance', name: 'aopalliance', version: '1.0'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.1'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'commons-pool', name: 'commons-pool', version: '1.6'
    compile group: 'net.sf.ezmorph', name: 'ezmorph', version: '1.0.6'
    compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4', classifier: 'jdk15'
    compile group: 'net.java.dev.rome', name: 'rome', version: '1.0.0'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-ec2', version: '1.11.49'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.49'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.7.0'
    testCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.springframework', name: 'spring-test', version: '4.3.3.RELEASE'
    testCompile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.2.0'
    testCompile group: 'com.jayway.jsonpath', name: 'json-path-assert', version: '2.2.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.2.9'
    testCompile group: 'javax.mail', name: 'mail', version: '1.5.0-b01' //only for tomcat :(, add this jar to ${CATALINA_HOME}/lib
    testCompile group: 'javax.activation', name: 'activation', version: '1.1.1' //only for tomcat, add this jar to ${CATALINA_HOME}/lib
    testCompile group: 'javax.mail', name: 'javax.mail-api', version: '1.5.6'
}

//default war for wildfly
war {
    from (project(':cwsfe_cms_dao').file('src/main/resources/'));
    exclude "resources-cwsfe-cms/css";
    exclude "resources-cwsfe-cms/js";
    from("build/webapp/resources-cwsfe-cms/css") {
        into '/resources-cwsfe-cms/css'
    }
    from("build/webapp/resources-cwsfe-cms/js") {
        into '/resources-cwsfe-cms/js'
    }
}

def gitCommitHash = "git rev-parse HEAD".execute().text.trim();

war.archiveName = 'CWSFE_CMS-' + version + '.war';
war {
    manifest {
        attributes(
            'Specification-Title': project.name,
            'Specification-Version': version,
            'build-number': System.getenv().BUILD_NUMBER == null ? 'local build' : System.getenv().BUILD_NUMBER,
            'build-id': System.getenv().BUILD_ID == null ? 'local build' : System.getenv().BUILD_ID,
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Build-Url': System.getenv().BUILD_URL == null ? 'local build' : System.getenv().BUILD_URL,
            'scm-version': gitCommitHash == null ? 'local build' : gitCommitHash,
            'Build-Tag': System.getenv().BUILD_TAG == null ? 'local build' : System.getenv().BUILD_TAG,
            'Jenkins-Url': System.getenv().JENKINS_URL == null ? 'local build' : System.getenv().JENKINS_URL,
            'Build-Workspace': System.getenv().WORKSPACE == null ? 'local build' : System.getenv().WORKSPACE,
            'Git-Url': System.getenv().GIT_URL == null ? 'local build' : System.getenv().GIT_URL,
            'Git-Branch': System.getenv().GIT_BRANCH == null ? 'local build' : System.getenv().GIT_BRANCH
        )
    }
}

task createTomcatWar(type: War, dependsOn: classes) {
    archiveName = 'CWSFE_CMS-tomcat-' + version + '.war';
    classpath configurations.tomcatLibs // adds a configuration to the WEB-INF/lib dir
    manifest {
        attributes(
            'Specification-Title': project.name,
            'Specification-Version': version,
            'build-number': System.getenv().BUILD_NUMBER == null ? 'local build' : System.getenv().BUILD_NUMBER,
            'build-id': System.getenv().BUILD_ID == null ? 'local build' : System.getenv().BUILD_ID,
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Build-Url': System.getenv().BUILD_URL == null ? 'local build' : System.getenv().BUILD_URL,
            'scm-version': gitCommitHash == null ? 'local build' : gitCommitHash,
            'Build-Tag': System.getenv().BUILD_TAG == null ? 'local build' : System.getenv().BUILD_TAG,
            'Jenkins-Url': System.getenv().JENKINS_URL == null ? 'local build' : System.getenv().JENKINS_URL,
            'Build-Workspace': System.getenv().WORKSPACE == null ? 'local build' : System.getenv().WORKSPACE,
            'Git-Url': System.getenv().GIT_URL == null ? 'local build' : System.getenv().GIT_URL,
            'Git-Branch': System.getenv().GIT_BRANCH == null ? 'local build' : System.getenv().GIT_BRANCH
        )
    }
}

task integration_tests_local(type: Test) {
    systemProperty "spring.profiles.test-groups", "integration-tests-local"
    systemProperty "spring.profiles.active", "tomcat";
    systemProperty "test-groups", "integration-tests-local";
    systemProperty "test-groups", "integration-tests-local";

    //pass environment variable parameters from .gradle/gradle.properties to environment variable parameters in test task
    systemProperty "cwsfe_cms.jdbc.driverClassName", System.properties['cwsfe_cms.jdbc.driverClassName'];
    systemProperty "cwsfe_cms.jdbc.url", System.properties['cwsfe_cms.jdbc.url'];
    systemProperty "cwsfe_cms.jdbc.user", System.properties['cwsfe_cms.jdbc.user'];
    systemProperty "cwsfe_cms.jdbc.password", System.properties['cwsfe_cms.jdbc.password'];
}

jacoco {
    toolVersion = "0.7.8"
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
    executionData = files('build/jacoco/test.exec', 'build/jacoco/integration_tests_local.exec')
}

sonarqube {
    properties {
        property "sonar.projectKey", 'cwsfe_cms_website'
        property "sonar.projectName", 'CWSFE cms website'
        property "sonar.sources", 'src/main'
        property "sonar.tests", 'src/test'
        property "sonar.sourceEncoding", 'UTF-8'
        property "sonar.exclusions", '**/datatables/*,**/foundation/*,**/jquery/*,**/jqueryui/*,**/knockout/*,**/modernizr/*,**/requirejs/*,**/*.css'
    }
}

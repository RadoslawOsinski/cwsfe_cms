buildscript {
    repositories {
        mavenLocal();
        mavenCentral();
    }
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'jacoco'

version = project.ext.project_version
group = "eu.com.cwsfe.cms"
compileJava.options.encoding = 'UTF-8'

configurations {
    tomcatLibs
}

dependencies {
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.0.1'
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version: '3.0.1'
    testCompile 'com.codeborne:selenide:' + project.ext.selenide_version
}

task integration_tests_local(type: Test) {
    systemProperty "spring.profiles.test-groups", "integration-tests-local"
    systemProperty "spring.profiles.active", "tomcat";
    systemProperty "test-groups", "integration-tests-local";
    systemProperty "test-groups", "integration-tests-local";

    //pass environment variable parameters from .gradle/gradle.properties to environment variable parameters in test task
    systemProperty "cwsfe_cms.jdbc.driverClassName", System.properties['cwsfe_cms.jdbc.driverClassName'];
    systemProperty "cwsfe_cms.jdbc.url", System.properties['cwsfe_cms.jdbc.url'];
    systemProperty "cwsfe_cms.jdbc.user", System.properties['cwsfe_cms.jdbc.user'];
    systemProperty "cwsfe_cms.jdbc.password", System.properties['cwsfe_cms.jdbc.password'];
}

jacoco {
    toolVersion = project.ext.jacoco_version
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled true
        csv.enabled false
        html.setDestination(new File("${buildDir}/reports/coverage"))
    }
    executionData = files('build/jacoco/test.exec', 'build/jacoco/integration_tests_local.exec')
}

sonarqube {
    properties {
        property "sonar.projectKey", 'cwsfe_cms_website_integration_tests'
        property "sonar.projectName", 'CWSFE cms website integration tests'
        property "sonar.sources", 'src/main'
        property "sonar.tests", 'src/test'
        property "sonar.sourceEncoding", 'UTF-8'
    }
}

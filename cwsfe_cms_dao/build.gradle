buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'jacoco'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'org.junit.platform.gradle.plugin'

version = project.ext.project_version
group = "eu.com.cwsfe.cms"
compileJava.options.encoding = 'UTF-8'

dependencies {
    compile group: 'org.springframework', name: 'spring-tx', version: project.ext.spring_version
    compile group: 'org.springframework', name: 'spring-jdbc', version: project.ext.spring_version
    compileClasspath group: 'org.springframework', name: 'spring-core', version: project.ext.spring_version
    compile group: 'org.springframework', name: 'spring-beans', version: project.ext.spring_version
    compile group: 'org.springframework', name: 'spring-context', version: project.ext.spring_version
    compile group: 'org.springframework', name: 'spring-context-support', version: project.ext.spring_version
    compile group: 'org.springframework', name: 'spring-web', version: project.ext.spring_version  //dla CommonsMultipartFile
    compile group: 'net.sf.ehcache', name: 'ehcache', version: '2.10.3'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: project.ext.logback_version
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1211'
    compile group: 'org.flywaydb', name: 'flyway-core', version: '4.1.1'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: project.ext.junit5_platform_version

    //    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.ext.junit5_version
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: project.ext.junit5_version
//    testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.0.0-M3'

    testCompile group: 'org.springframework', name: 'spring-test', version: project.ext.spring_version
    testRuntime group: 'org.springframework', name: 'spring-test', version: project.ext.spring_version
}

def gitCommitHash = "git rev-parse HEAD".execute().text.trim();

jar.archiveName = "CWSFE_CMS_DAO-" + version + ".jar"
jar {
    manifest {
        attributes(
            'Specification-Title': project.name,
            'Specification-Version': version,
            'build-number': System.getenv().BUILD_NUMBER == null ? 'local build' : System.getenv().BUILD_NUMBER,
            'build-id': System.getenv().BUILD_ID == null ? 'local build' : System.getenv().BUILD_ID,
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Build-Url': System.getenv().BUILD_URL == null ? 'local build' : System.getenv().BUILD_URL,
            'scm-version': gitCommitHash == null ? 'local build' : gitCommitHash,
            'Build-Tag': System.getenv().BUILD_TAG == null ? 'local build' : System.getenv().BUILD_TAG,
            'Jenkins-Url': System.getenv().JENKINS_URL == null ? 'local build' : System.getenv().JENKINS_URL,
            'Build-Workspace': System.getenv().WORKSPACE == null ? 'local build' : System.getenv().WORKSPACE,
            'Git-Url': System.getenv().GIT_URL == null ? 'local build' : System.getenv().GIT_URL,
            'Git-Branch': System.getenv().GIT_BRANCH == null ? 'local build' : System.getenv().GIT_BRANCH
        )
    }
}

task testJar(type: Jar, dependsOn: testClasses) {
    baseName = "TEST-${project.archivesBaseName}".toUpperCase()
    from sourceSets.test.output
}

task integration_tests_local(type: Test) {
    systemProperty "spring.profiles.test-groups", "integration-tests-local"
    systemProperty "spring.profiles.active", "tomcat";
    systemProperty "test-groups", "integration-tests-local";
    systemProperty "test-groups", "integration-tests-local";

    //pass environment variable parameters from .gradle/gradle.properties to environment variable parameters in test task
    systemProperty "cwsfe_cms.jdbc.driverClassName", System.properties['cwsfe_cms.jdbc.driverClassName'];
    systemProperty "cwsfe_cms.jdbc.url", System.properties['cwsfe_cms.jdbc.url'];
    systemProperty "cwsfe_cms.jdbc.user", System.properties['cwsfe_cms.jdbc.user'];
    systemProperty "cwsfe_cms.jdbc.password", System.properties['cwsfe_cms.jdbc.password'];
}

configurations {
    tests
}

artifacts {
    tests testJar
}

jacoco {
    toolVersion = project.ext.jacoco_version
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
    executionData = files('build/jacoco/test.exec', 'build/jacoco/integration_tests_local.exec')
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'cwsfe_cms_dao'
        property 'sonar.projectName', 'CWSFE cms dao'
        property 'sonar.sources', 'src/main'
        property 'sonar.tests', 'src/test'
        property 'sonar.sourceEncoding', 'UTF-8'
    }
}
